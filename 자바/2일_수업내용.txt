. 멤버 연산자        
++, --, +(부호), -(부호), !, ~, (타입명) -> 단항 연산자
*, /, %
+, -
==(등가 연산자), !=, >, <, >=, <=, instanceof(7장 예정)
>>, >>>, << // 보안에서 많이 쓰임
&, |, ^ (비트 연산)
&&(논리 And)
||(논리 Or)
항1?항2:항3 // 항1 연산결과가 참이면 항2를 사용 아니면 항3을 사용해라(조건 연산자)(삼항 연산자)
=, +=, -=, *=, /= 

위               ->          아래
우선순위 높고              우선순위 낮고

- 우선순위는 대입이 항상 마지막에 한다.
- 단항 연산자 --> 이항 연산자 --> 삼항 연산자 // 우선 순위는 단항이 가장 빠르고 삼항이 가장 느리다.


연산자 피연산자(항)
++su, --su, -su(부호연산자), !true
++su(전의형), su++(후의형) // 리터럴에 적용할 수 없다, 리터럴은 l-value가 될 수 없다.

l-value : 방 : 변수
r-value : 값 : 식

= 연산을 처리할 때
l-value의 타입과 r-value의 타입은 동일해야 한다.
그런데 만일 다른 타입이 사용되면 r-value의 값이 손실되지 않는 범위에서 l-value의 타입으로 자동 변환한다.

	int(4byte) = chat(2byte) ---->가능 // 값 손실되지 않음
	int(4byte) = double(8byte) ----> 불가능 // 값 손실
형변환
: ivalue = bvalue; // 각자의 타입이 맞지 않는다. boolean형은 강제, 자동 형변환이 되지 않는다.

byte < short < int < long < float < double // 왜 long이 큰데 float이 뒤에 있는지 자바 정석 참고
(1)	(2)    (4)     (8)      (4)       (8)
char < int < long < float < double
(2)      (4)    (8)      (4)       (8)  

short = char 자동 형변환 불가, 강제 형변환 불가 
char = short 자동 형변환 불가, 강제 형변환 불가 
char = byte 자동 형변환 불가, 강제 형변환 불가
-> 왜? 값의 범위가 다르다.

정수 -> byte, short, int, long
      실수 -> float, double
      문자 -> char
      논리 -> boolean
      문자열 -> String

시험 예상 문제
boolean형은 강제, 자동 형변환이 되지 않는다.

[ 제어문 ]

정의된 수행 문장들을 한번씩 순차적으로 수행하면서 진행하는 것이 기본이지만 조건에 따라 수행 문장들을 선택하여 수행하거나 반복해서 여러번 수행하도록 하고자 할 때 제어문을 사용한다.

- 선택(조건)제어문 - if(else), switch 
- 반복제어문 - for, while, do ~ while
- 분기제어문 - break, continue

if(조건식)
   수행문장;

if(조건식){
   수행문장1;
   수행문장2;
} else{
   수행문장3;
   수행문장4;
}

if(조건식1)
   수행문장1;
else if(조건식2)
   수행문장2;
else if(조건식3)
   수행문장3;
       :
else


switch(식){
  case 비교값: 수행문장1;
	      수행문장2;
	      break;
  case 비교값: 수행문장3;
	      수행문장4;
	      break;
  case 비교값: 수행문장5;
	      수행문장6;
  case 비교값: 수행문장7;
	      수행문장8;
	      break;
  default: 수행문장9;
}

식: int(byte, short, char), String만 쓸 수 있다.

[ 반복구문 ]
for : 미리 반복횟수를 알고 있거나 어떠한 값의 변화를 주면서 반복하려는 경우
while : 조건이 만족되는 동안 반복하려는 경우

for(초기식:조건식:증감식)
   반복문장

while(조건식)
   반복문장

for(변수의선언 및 초기화;반복횟수를 결정할 조건식;변수의 값을 변화시키는식)

for(;;) ---> 무한루프 // 3개의 식 다 생략 가능하지만 세미콜론은 생략 불가 

for(int i=1; i<10; i++) // 참이면 수행, 거짓이면 수행 하지 않는다. 
    반복문장  	

for(int num=1; num <= 9; num++) 
	system.out.println(5*num+" ");   

for(int n=5;n > 0; n--)
	system.out.println(n);

